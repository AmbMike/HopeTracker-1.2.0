<?php

error_reporting(E_ALL);

/**
 * An object of the Commmity Log notification box. Takes in the different
 * that generate each type of notificatin, then puts it all into an array to
 * to the user. This was done to provide a controller for the notifications.
 *
 * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
 */

if (0 > version_compare(PHP_VERSION, '5')) {
    die('This file was generated for PHP 5');
}

/* user defined includes */
// section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B0A-includes begin
error_reporting(0);
include_once(CLASSES .'CommunityLog.php');
include_once(CLASSES .'Database.php');
include_once(CLASSES .'Forum.php');
include_once(CLASSES .'Sessions.php');
include_once(CLASSES .'User.php');
include_once(CLASSES .'class.FontAwesomeClass.php');
include_once(CLASSES .'class.Link.php');
include_once(CLASSES .'General.php');
include_once(CLASSES .'class.newComment.php');
include_once(CLASSES .'ForumFollowedCategory.php');
include_once(CLASSES . 'class.LikedForum.php');
// section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B0A-includes end

/* user defined constants */
// section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B0A-constants begin
// section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B0A-constants end

/**
 * An object of the Commmity Log notification box. Takes in the different
 * that generate each type of notificatin, then puts it all into an array to
 * to the user. This was done to provide a controller for the notifications.
 *
 * @access public
 * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
 */
class CommunityNotification
{
    // --- ASSOCIATIONS ---


    // --- ATTRIBUTES ---

    /**
     * Holds the array of data generated by the function.
     *
     * @access public
     * @var array
     */
    public $notificationsFunction = array();

    /**
     * Short description of attribute userId
     *
     * @access private
     * @var Integer
     */
    private $userId = null;

    /**
     * The object of icons.
     *
     * @access public
     * @var array
     */
    public $Icons = array();

    /**
     * For the General Class.
     *
     * @access public
     * @var array
     */
    public $General = array();

    // --- OPERATIONS ---

    /**
     * Short description of method __construct
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @param  userId
     * @return mixed
     */
    public function __construct($userId)
    {
        // section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B1B begin
        $this->userId = $userId;
        $this->Icons = new FontAwesomeClass();
        $this->General = new General();
        // section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B1B end
    }

    /**
     * The function for getting the notification when the user's journal post
     * been liked by another user.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newLikesFormJournal()
    {
        $returnValue = array();

        // section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B14 begin
        $CommunityLog = new CommunityLog();

        foreach ($CommunityLog->content($this->userId) as $postData) {
            $returnValue[] = $postData;
        }
        // section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B14 end

        return (array) $returnValue;
    }

    /**
     * A like on a user's answer.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newLikesOnUserAnswers()
    {
        $returnValue = array();

        // section -64--88-0-19-359969c0:161e3016d5d:-8000:00000000000010E4 begin
	    require_once(CLASSES . 'class.ForumAnswers.php');
	    $ForumAnswers= new ForumAnswers();
	    $returnValue = $ForumAnswers->getLikedAnswersOwnedByUser($this->userId);
        // section -64--88-0-19-359969c0:161e3016d5d:-8000:00000000000010E4 end

        return (array) $returnValue;
    }

    /**
     * Check and get data for any inspirations quotes the logged in user has
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newLikedInspiration()
    {
        $returnValue = array();

        // section -64--88-0-19-3d5b9cc5:161b8d6a9c4:-8000:00000000000010BA begin
	    $Database = new Database();

	    $sql = $Database->prepare("SELECT * FROM liked_inspiration WHERE user_id = ?");
	    $sql->setFetchMode( PDO::FETCH_ASSOC );
	    $sql->execute( array(
		    $this->userId
	    ) );
	    $returnValue = $sql->fetchAll();
        // section -64--88-0-19-3d5b9cc5:161b8d6a9c4:-8000:00000000000010BA end

        return (array) $returnValue;
    }

    /**
     * Gets new journal comments from journal posts the user has created.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newJournalComments()
    {
        $returnValue = array();

        // section -64--88-0-2--6b757a30:15ece1b2177:-8000:0000000000000B82 begin
        $newComments = New newComment($this->userId);
        $returnValue = $newComments->newComments();
        // section -64--88-0-2--6b757a30:15ece1b2177:-8000:0000000000000B82 end

        return (array) $returnValue;
    }

    /**
     * Short description of method newFollowedUser
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newFollowedUser()
    {
        $returnValue = array();

        // section -64--88-0-19-3d5b9cc5:161b8d6a9c4:-8000:00000000000010B5 begin
	    $Database = new Database();

	    $sql = $Database->prepare("SELECT * FROM follow_user WHERE followers_id = ? OR  follow_user_id = ?");
	    $sql->setFetchMode( PDO::FETCH_ASSOC );
	    $sql->execute( array(
	    	$this->userId,
		    $this->userId
	    ) );
	    $returnValue = $sql->fetchAll();
        // section -64--88-0-19-3d5b9cc5:161b8d6a9c4:-8000:00000000000010B5 end

        return (array) $returnValue;
    }

    /**
     * Get new journal posts from user that are being followed.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newAnswerForFollowedQuestion()
    {
        $returnValue = array();

        // section -64--88-0-2-1cb2927f:15ee36d5209:-8000:0000000000000B89 begin
	    require_once(CLASSES . 'class.FollowedPost.php');
	    $FollowedPost = new FollowedPost();

	    require_once(CLASSES . 'class.ForumAnswers.php');
	    $ForumAnswers= new ForumAnswers();

	   $questionIds = $FollowedPost->getUsersFollowedPostIds($this->userId);

	   $AnswersArr = array();
	   foreach ($questionIds as $question_id):
		   $AnswersArr[] = $ForumAnswers->getAnswersByQuestionId($question_id);
	   endforeach;
	    $flattenArray = array();
	    foreach ($AnswersArr as $childArray) {
		    foreach ($childArray as $value) {
			    $flattenArray[] = $value;
		    }
	    }
	   $returnValue = $flattenArray;
        // section -64--88-0-2-1cb2927f:15ee36d5209:-8000:0000000000000B89 end

        return (array) $returnValue;
    }

    /**
     * Short description of method newFormAnswer
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newFormAnswer()
    {
        $returnValue = array();

        // section -64--88-0-19-342b32de:161b381bb64:-8000:000000000000107F begin
	    include_once(CLASSES . 'class.ForumAnswers.php');
	    include_once(CLASSES . 'class.AskQuestionForum.php');

	    $AskQuestionForum = new AskQuestionForum();
		$ForumAnswers = new ForumAnswers();

		/** Run a loop on all question ids the user owns */
	    foreach ($AskQuestionForum->getPostIdOwnedByUser() as $userJournalId):

		    /** Put all  answers to question the user owns */
		    if(count($ForumAnswers->getAnswers(false,$userJournalId)) > 0){
			    $returnValue[] =  $ForumAnswers->getAnswers(false,$userJournalId);
		    }

		endforeach;

        // section -64--88-0-19-342b32de:161b381bb64:-8000:000000000000107F end

        return (array) $returnValue;
    }

    /**
     * Gets new forum posts from subcategories that the user is following.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newForumPostFollowedSubcategory()
    {
        $returnValue = array();

        // section -64--88-0-2-1cb2927f:15ee36d5209:-8000:0000000000000B8C begin
            $ForumPost = new ForumFollowedCategory();
            $forumPosts = $ForumPost->newForumPost();

        // section -64--88-0-2-1cb2927f:15ee36d5209:-8000:0000000000000B8C end

        return (array) $returnValue;
    }

    /**
     * Liked journal comments the user has created.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @param  userId
     * @return array
     */
    public function newLikedComment($userId)
    {
        $returnValue = array();

        // section -64--88-0-2--6b757a30:15ece1b2177:-8000:0000000000000B85 begin
        $CommunityLog = new CommunityLog();
        $CommunityLog->user_liked_commented_on_journal();
        // section -64--88-0-2--6b757a30:15ece1b2177:-8000:0000000000000B85 end

        return (array) $returnValue;
    }

    /**
     * Short description of method newJournalFromFollowedUser
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function newJournalFromFollowedUser()
    {
        $returnValue = array();

        // section -64--88-0-2-197f47c8:15ef29f26d0:-8000:0000000000000B8F begin
        $NewJournalFromFollowedUser = new CommunityLog();
        $returnValue = $NewJournalFromFollowedUser->new_journals_from_followed_users();
        // section -64--88-0-2-197f47c8:15ef29f26d0:-8000:0000000000000B8F end

        return (array) $returnValue;
    }

    /**
     * Builds the array data to send out to the user.
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @param  timestamp
     * @param  icon
     * @param  textValue
     * @param  likedUserId
     * @param  extra
     * @return array
     */
    public function buildNotificationOutput($timestamp, $icon, $textValue, $likedUserId, $extra = false)
    {
        $returnValue = array();

        // section -64--88-0-2--56a3602c:15ec92073bc:-8000:0000000000000B70 begin
        /**
         * The timestamp of when the user first liked the journal.
         * @var:LikedTimestamp.
         */
        $returnValue['LikedTimestamp'] = $timestamp;

        /**
         * The Icon for the notification.
         * @var FontAwesomeClass : Icon
         */
        $returnValue['Icon'] = $icon;

        /**
         * Text value for the notification.
         * Includes the @var:title from the journal post that was liked.
         * @var: TextValue
         */
        $returnValue['TextValue'] = $textValue;

        /**
         * The id of the user who liked the journal.
         * @var:liked_by_user_id
         */
        $returnValue['liked_by_user_id'] = $likedUserId;

        if($extra != false){
        	$returnValue['extraData'] = $extra;
        }
        // section -64--88-0-2--56a3602c:15ec92073bc:-8000:0000000000000B70 end

        return (array) $returnValue;
    }

    /**
     * Short description of method buildNotifications
     *
     * @access public
     * @author Michael Giammattei, <mgiamattei@ambrosiatc.com>
     * @return array
     */
    public function buildNotifications()
    {
        $returnValue = array();

        // section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B10 begin

	    include_once(CLASSES . 'class.AskQuestionForum.php');
	    $AskQuestionForum = new AskQuestionForum();
	    $this->newFormAnswer();

        /**
         * Keeps track of array count through all foreach loops.
         * Each notification function gets put into an array by
         * running a foreach loop.
         * @var $arrayCount
         */
        $arrayCount = 0;
        /** @var $Journal : Journal Class */
        $Journal = new Journal();

        /**
         * array of notifications when a user likes the users Journal
         * @return array : Liked Journals.
         */
        foreach ($this->newLikesFormJournal() as $index => $function) {

            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/families-of-drug-addicts/journal-' . $function['liked_journal'][0]['id'] . '/' . $this->General->url_safe_string($this->General->trim_text($function['liked_journal'][0]['content'],'40',true,true)) . '/';
	        $linkValue = ($function['liked_journal'][0]['title']) ? $function['liked_journal'][0]['title'] : $this->General->trim_text($function['liked_journal'][0]['content'],'40',true,true);
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function['liked_timestamp'],
                $this->Icons->thumbsUp,
                'Your Journal '. $notificationLink . ' received a like.',
                $function['liked_by_user_id']
            );
        }

        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;
        foreach ($this->newJournalComments() as $function) {
            /** @var  $journalTitle : Journal title by the journal's ID */
            $journalTitle = $function['comment'];
            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */

            $href =  '/families-of-drug-addicts/journal-' .  $function['journal_id'] .'/' .$this->General->url_safe_string($function['comment']);
            $linkValue = $journalTitle;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function['timestamp'],
                $this->Icons->comment,
                'Your Journal '. $notificationLink . ' received a comment.',
                $function['user_id']
            );

            /**
             * Increments the index where the previous foreach has left off.
             * This is done to continue building the array off the last array.
             */
            $index++;
        }
        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;
        foreach ($this->newAnswerForFollowedQuestion() as $index => $function) {
            /** @var  $journalTitle : Journal title by the journal's ID */

            $answer = $this->General->trim_text($function['answer'],80,true,true);
            $linkURLString = $this->General->trim_text($function['answer'],50,true,true);
            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/forum/'. $this->General->url_safe_string($AskQuestionForum->getQuestionSubcategory( $function['question_id'] )).'/' .  $function['question_id'] .'/' .$this->General->url_safe_string($linkURLString);
            $linkValue = $answer;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function['TIMESTAMP'],
                $this->Icons->questionCircle,
                'A question you\'re following received an answer:  '. $notificationLink,
                $function['user_id']
            );

            /**
             * Increments the index where the previous foreach has left off.
             * This is done to continue building the array off the last array.
             */
            $index++;
        }
        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;
        foreach ($this->newLikesOnUserAnswers() as $index => $function) {
	        require_once(CLASSES . 'class.ForumAnswers.php');
	        $ForumAnswers= new ForumAnswers();

	        /** The Answer's Data.   */
	        $AnswerArr = $ForumAnswers->getAnswersQuestionId($function['post_id']);
	        /** The Answer's question id.   */
	        $AnswersQuestionId = $AnswerArr['question_id'];

            $answer = $this->General->trim_text($AnswerArr['answer'],80,true,true);
            $linkURLString = $this->General->trim_text($AnswerArr['answer'],50,true,true);
            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/forum/'. $this->General->url_safe_string($AskQuestionForum->getQuestionSubcategory($AnswersQuestionId)).'/' .  $AnswersQuestionId .'/' .$this->General->url_safe_string($linkURLString);
            $linkValue = $answer;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function['TIMESTAMP'],
                $this->Icons->thumbsUpSolid,
                'Your answer:  '. $notificationLink . ' has recently received a like!',
                $function['likers_user_id']
            );

            /**
             * Increments the index where the previous foreach has left off.
             * This is done to continue building the array off the last array.
             */
            $index++;
        }
        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;
        foreach ($this->newLikedInspiration()  as $function) {

            /** @var  $journalTitle : Journal title by the journal's ID */
            $journalTitle = 'View Inspiration';
            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */

            $href = '/addiction-quotes/' .$function['folder']  .'/' . $function['file_name'] . '/';
            $linkValue = $journalTitle;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            $extraData = array();
	        $extraData['folder'] = $function['folder'];
	        $extraData['filename'] = $function['file_name'];
	        $extraData['fullPath'] = $function['img_full_path'];

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function['TIMESTAMP'],
                $this->Icons->solidEye,
                'You recently liked a '. ucfirst($function['folder']) . ' image.' . $notificationLink,
                false,
	            $extraData

            );

            /**
             * Increments the index where the previous foreach has left off.
             * This is done to continue building the array off the last array.
             */
            $index++;
        }
	    /**
	     * Increment the arrayCount to keep track of each notifications' array.
	     */
	    $arrayCount++;
	    foreach ($this->newFollowedUser() as $function) {
		    /** If the logged in user is the person who followed a user generate data here.  */
		   if($function['followers_id'] == $this->userId):
			   /** The user Id of the person who is the other user. */
			   $thisUserId = $function['follow_user_id'];

			   $LinkContent = User::Username( $thisUserId);

			   $href = '/families-of-drug-addicts/user-'.$thisUserId.'/'.$this->General->url_safe_string($LinkContent).'/';
			   $linkValue = $LinkContent;
			   $options = array(
				   'class' => 'notification-link'
			   );
			   $Link = new Link($href,$linkValue,$options);

		        /** If the logged in user was the user being followed generate the data here */
			   else:
					/** The user Id of the person who is the other user. */
				   $thisUserId = $function['followers_id'];

				   $LinkContent = User::Username( $thisUserId );

				   $href = '/families-of-drug-addicts/user-'.$thisUserId.'/'.$this->General->url_safe_string($LinkContent).'/';
				   $linkValue = $LinkContent;
				   $options = array(
					   'class' => 'notification-link'
				   );
				   $Link = new Link($href,$linkValue,$options);
		   endif;

		    $notificationLink = $Link->buildLink();


		    /** If the logged in user is the person who followed a user generate data here.  */
		    if($function['followers_id'] == $this->userId):
			    if($function['status'] == 1):
				    $textValue = "You have recently began following " . $notificationLink;
			    elseif($function['status'] == 0) :
				    $textValue = "You have recently un-followed " . $notificationLink;
			    endif;
		    /** If the logged in user was the user being followed generate the data here */
		    else:
			    if($function['status'] == 1):
				    $textValue = "A user named: " .$notificationLink . ' has recently started following you.';
			    elseif($function['status'] == 0) :
				    $textValue = "A user named: " .$notificationLink . ' has recently un-followed you.';
			    endif;
		    endif;

		    /**
		     * Puts the notification values into the array.
		     */
		    $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
			    $function['TIMESTAMP'],
			    $this->Icons->starSolid,
			    $textValue,
			    $thisUserId
		    );

		    /**
		     * Increments the index where the previous foreach has left off.
		     * This is done to continue building the array off the last array.
		     */
		    $index++;
	    }

        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;

        foreach ($this->newFormAnswer() as $function) {

            /** The */
            $journalTitle = $function[0]['answer'];

            /** Get the question's subcategory name  for the link. */
	       $subcategory =  $AskQuestionForum->getQuestionSubcategory( $function[0]['question_id'] );

            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/forum/' . $this->General->url_safe_string($subcategory) . '/' . $function[0]['question_id'] . '/' .$journalTitle;
            $linkValue = $journalTitle;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function[0]['TIMESTAMP'],
                $this->Icons->solidCheckmark,
                'Your Question received an answer: ' . $notificationLink ,
                $function[0]['user_id']
            );

            /**
             * Increments the index where the previous foreach has left off.
             * This is done to continue building the array off the last array.
             */
            $index++;
        }

        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;

        /**
         * array of new forum post from subcategories the user is following.
         * @return array : journal post data.
         */
        foreach ($this->newForumPostFollowedSubcategory() as $index => $function) {

            /** @var $parent_category - the name of the parent category for the post*/
            $parent_category = $function['parent_category'];

            /** @var $subcategory_name - the name of the subcategory for the post*/
            $subcategory_name = $function['SubCategoryName'];

            /**
             * If the subcategory has more then one post then run this function,
             * which will put put the second level posts into the first level returned
             * array including the names above.
             */
            if(count($function['Posts']) > 0):
                foreach ($function['Posts'] as $post_arr) :

                    /**
                     * Create the outbound link.
                     */
                    $href = '/forum/' . $post_arr['id'] . '/' . $this->General->url_safe_string($post_arr['title']) . '/';
                    $linkValue = $parent_category . '/' . $subcategory_name;
                    $options = array(
                        'class' => 'notification-link'
                    );
                    $Link = new Link($href,$linkValue,$options);
                    $notificationLink = $Link->buildLink();

                    $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                        $post_arr['TIMESTAMP'],
                        $this->Icons->thumbsUp,
                        'The forum category '. $notificationLink . ' has a new post.',
                        $post_arr['created_user_id']
                    );

                    /** Increments the parent foreach count to allow for the proper count between
                     *  main foreach and inside foreach.
                     */
                    $index++;

                    /**
                     * Keeps count of the main foreach index to prevent the foreaches from overwriting each other
                     */
                    $arrayCount++;
                endforeach;

            else:

                /**
                 * Create the outbound link.
                 */
                $href = '/forum/' . $function['Posts']['id'] . '/' . $this->General->url_safe_string($function['Posts']['title']) . '/';
                $linkValue = $parent_category . '/' . $subcategory_name;
                $options = array(
                    'class' => 'notification-link'
                );

                $Link = new Link($href,$linkValue,$options);
                $notificationLink = $Link->buildLink();

                $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                    $function['Posts']['TIMESTAMP'],
                    $this->Icons->thumbsUp,
                    'The forum category '. $notificationLink . ' has a new post.',
                    $function['Posts']['created_user_id']
                );

            endif;
        }

        $arrayCount++;
        /**
         * array of new Journals post from users the user is following.
         * @return array : journal post data.
         */
        foreach ($this->newJournalFromFollowedUser() as $index => $function) {

            /**
             * If the subcategory has more then one post then run this function,
             * which will put put the second level posts into the first level returned
             * array including the names above.
             */

            /**
             * Create the outbound link.
             */
            $linkContent = (!empty($function['title'])) ? $function['title'] : substr($function['content'],0,50);
	        $href = '/families-of-drug-addicts/journal-' .  $function['id'] .'/' .$this->General->url_safe_string($linkContent);
            $linkValue = $linkContent;
            $options = array(
                'class' => 'notification-link'
            );

            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            $returnValue[$arrayCount][$index] = $this->buildNotificationOutput(
                $function['timestamp'],
                $this->Icons->comment,
                'New journal '. $notificationLink . ' from a user your following.',
                $function['user_id']
            );


        }

        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;

        $LikedForum = new LikedForum();
        /** @foreach get forum replies on forum post the user has liked.  */
        foreach ($LikedForum->getFollowedPostsReplies() as $function) {

            /** @var  $Forum : Forum Class */
            $Forum = new Forum();
            $forumTitle = $Forum->get_forum_by_id($function['post_id'])['title'];

            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/forum/' . $function['post_id'] . '/' . $this->General->url_safe_string($forumTitle) . '/';
            $linkValue = $forumTitle;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][] = $this->buildNotificationOutput(
                $function['TIMESTAMP'],
                $this->Icons->comment,
                'The forum post '. $notificationLink . ' received a response.',
                $function['post_user_id']
            );
        }

        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;
        $LikedForum = new LikedForum();

        /** @foreach get forum replies on forum post the user has liked.  */
        foreach ($LikedForum->getFollowedPostsReplies() as $function) {

            /** @var  $Forum : Forum Class */
            $Forum = new Forum();
            $forumTitle = $Forum->get_forum_by_id($function['post_id'])['title'];

            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/forum/' . $function['post_id'] . '/' . $this->General->url_safe_string($forumTitle) . '/';
            $linkValue = $forumTitle;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][] = $this->buildNotificationOutput(
                $function['TIMESTAMP'],
                $this->Icons->comment,
                'The forum post '. $notificationLink . ' received a response.',
                $function['post_user_id']
            );

        }
        /**
         * Increment the arrayCount to keep track of each notifications' array.
         */
        $arrayCount++;

        $CommunityLog = new CommunityLog();

        /** @foreach get forums from users the user is following.  */
        foreach ($CommunityLog->new_forum_from_followed_users() as $function) {

            /** @var  $Forum : Forum Class */
            $Forum = new Forum();
            $forumTitle = $Forum->get_forum_by_id($function['id'])['title'];

            /**
             * Build the link for the @var:TextValue by using the Link call and
             * adding the link properties.
             * @var $notificationLink
             */
            $href = '/forum/' . $function['id'] . '/' . $this->General->url_safe_string($forumTitle) . '/';
            $linkValue = $forumTitle;
            $options = array(
                'class' => 'notification-link'
            );
            $Link = new Link($href,$linkValue,$options);
            $notificationLink = $Link->buildLink();

            /**
             * Puts the notification values into the array.
             */
            $returnValue[$arrayCount][] = $this->buildNotificationOutput(
                $function['TIMESTAMP'],
                $this->Icons->comment,
                'New forum post '. $notificationLink . ' from a user your following.',
                $function['created_user_id']
            );

        }

	   // Debug::out( $returnValue );
        // section -64--88-0-2--150a2353:15ec50fe66f:-8000:0000000000000B10 end

        return (array) $returnValue;
    }

} /* end of class CommunityNotification */

?>